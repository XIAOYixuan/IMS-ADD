# A wrapper generated by claude(cursor)
import numpy as np
import torch
from typing import Optional, Dict, Any
from omegaconf import DictConfig 
from .RawBoost.data_utils_rawboost import process_Rawboost_feature, get_default_args


class RawBoostAugmentation:
    """
    RawBoost augmentation wrapper that provides a clean interface for audio data augmentation.
    
    This class wraps the existing RawBoost library and provides default settings
    for easy use in the OneBit data pipeline.
    """
    
    def __init__(
        self,
        algorithm: int = 5,
        probability: float = 0.5,
        sample_rate: int = 16_000,
    ):
        """
        Initialize RawBoost augmentation.
        
        Args:
            algorithm: RawBoost algorithm number (0-8)
                0: No augmentation
                1: LnL_convolutive_noise
                2: ISD_additive_noise
                3: SSI_additive_noise
                4: Series combination (1+2+3)
                5: Series combination (1+2) - Default
                6: Series combination (1+3)
                7: Series combination (2+3)
                8: Parallel combination (1||2)
            probability: Probability of applying augmentation
            sample_rate: Audio sample rate
        """
        self.algorithm = algorithm
        self.probability = probability
        self.sample_rate = sample_rate
        default_args = get_default_args()
        self.parameters = default_args
    
    def __call__(self, audio: np.ndarray) -> np.ndarray:
        """
        Apply RawBoost augmentation to audio.
        
        Args:
            audio: Input audio as numpy array
            
        Returns:
            Augmented audio as numpy array
        """
        # Check if augmentation should be applied
        if np.random.random() > self.probability:
            return audio
        
        # Apply RawBoost augmentation
        try:
            augmented_audio = process_Rawboost_feature(
                feature=audio,
                sr=self.sample_rate,
                args=self.parameters,
                algo=self.algorithm
            )
            return augmented_audio
        except Exception as e:
            print(f"Warning: RawBoost augmentation failed, returning original audio: {e}")
            return audio
    
    def apply_to_tensor(self, audio_tensor: torch.Tensor) -> torch.Tensor:
        """
        Apply RawBoost augmentation to PyTorch tensor.
        
        Args:
            audio_tensor: Input audio as PyTorch tensor
            
        Returns:
            Augmented audio as PyTorch tensor
        """
        # Convert tensor to numpy
        audio_np = audio_tensor.numpy()
        
        # Apply augmentation
        augmented_np = self(audio_np)
        
        # Convert back to tensor
        return torch.from_numpy(augmented_np).float()
    
    @classmethod
    def from_config(cls, config: DictConfig) -> 'RawBoostAugmentation':
        """
        Create RawBoostAugmentation from OmegaConf configuration.
        
        Args:
            config: OmegaConf configuration object with augmentation settings
            
        Returns:
            RawBoostAugmentation instance
        """
        return cls(
            algorithm=getattr(config, 'algorithm', 5),
            probability=getattr(config, 'probability', 0.5),
            sample_rate=getattr(config, 'sample_rate', 16000)
        )
    
    def get_algorithm_description(self) -> str:
        """
        Get description of the current algorithm.
        
        Returns:
            String description of the algorithm
        """
        descriptions = {
            0: "No augmentation",
            1: "Linear and non-linear convolutive noise",
            2: "Impulsive signal-dependent noise",
            3: "Stationary signal-independent noise",
            4: "Series combination (1+2+3)",
            5: "Series combination (1+2)",
            6: "Series combination (1+3)",
            7: "Series combination (2+3)",
            8: "Parallel combination (1||2)"
        }
        return descriptions.get(self.algorithm, f"Unknown algorithm {self.algorithm}")
    
    def __repr__(self) -> str:
        """String representation of the augmentation."""
        return (f"RawBoostAugmentation(algorithm={self.algorithm}, "
                f"probability={self.probability}, sample_rate={self.sample_rate})") 