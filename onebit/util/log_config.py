# generated by claude(cursor)
import logging
import os
import warnings

class OneBitFormatter(logging.Formatter):
    """Custom formatter that shows paths starting from 'onebit/'"""
    
    def format(self, record):
        # Get the original pathname
        pathname = record.pathname
        
        # Find where 'onebit' appears in the path and truncate from there
        if 'onebit' in pathname:
            onebit_index = pathname.find('onebit')
            record.pathname = pathname[onebit_index:]
        
        return super().format(record)

# Create custom formatter
formatter = OneBitFormatter('%(levelname)s:%(pathname)s:%(lineno)d:\t%(message)s')

# Configure the logging module
logging.basicConfig(
    level=logging.INFO,
    force=True      # requires Python 3.8+; on older Pythons you need to remove handlers first
)

# Apply the custom formatter to all handlers
for handler in logging.root.handlers:
    handler.setFormatter(formatter)

# Suppress specific warnings
warnings.filterwarnings("ignore", message="Support for mismatched key_padding_mask and attn_mask is deprecated.*")
warnings.filterwarnings("ignore", category=UserWarning, module="torch.*")

# Get the logger
def get_logger(name: str) -> logging.Logger:
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)
    return logger
